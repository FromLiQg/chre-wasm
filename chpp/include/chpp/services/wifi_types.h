/*
 * Copyright (C) 2020 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
#ifndef CHPP_WIFI_TYPES_H_
#define CHPP_WIFI_TYPES_H_

// This file was automatically generated by chre_api_to_chpp.py
// Date: 2020-06-05 18:51:44 UTC
// Source: chre_api/include/chre_api/chre/wifi.h @ commit be7017fc

// DO NOT modify this file directly, as those changes will be lost the next
// time the script is executed

#include <stdbool.h>
#include <stdint.h>

#include "chpp/macros.h"
#include "chpp/services/common_types.h"
#include "chre_api/chre/version.h"
#include "chre_api/chre/wifi.h"

#ifdef __cplusplus
extern "C" {
#endif

CHPP_PACKED_START

//! See {@link chreWifiScanResult} for details
struct ChppWifiScanResult {
  uint32_t ageMs;
  uint16_t capabilityInfo;
  uint8_t ssidLen;
  uint8_t ssid[32];
  uint8_t bssid[6];
  uint8_t flags;
  int8_t rssi;
  uint8_t band;
  uint32_t primaryChannel;
  uint32_t centerFreqPrimary;
  uint32_t centerFreqSecondary;
  uint8_t channelWidth;
  uint8_t securityMode;
  uint8_t radioChain;
  int8_t rssiChain0;
  int8_t rssiChain1;
  uint8_t reserved[7];  // Input ignored; always set to 0
} CHPP_PACKED_ATTR;

//! See {@link chreWifiScanEvent} for details
struct ChppWifiScanEvent {
  uint8_t version;  // Input ignored; always set to CHRE_WIFI_SCAN_EVENT_VERSION
  uint8_t resultCount;
  uint8_t resultTotal;
  uint8_t eventIndex;
  uint8_t scanType;
  uint8_t ssidSetSize;
  uint16_t scannedFreqListLen;
  uint64_t referenceTime;
  struct ChppOffset scannedFreqList;  // References scannedFreqListLen instances
                                      // of struct ChppOffset
  struct ChppOffset
      results;  // References resultCount instances of struct ChppOffset
  uint8_t radioChainPref;
} CHPP_PACKED_ATTR;

CHPP_PACKED_END

// Encoding functions (CHRE --> CHPP)

/**
 * Converts from given CHRE structure to serialized CHPP type
 *
 * @param in Fully-formed CHRE structure
 * @param out Upon success, will point to a buffer allocated with chppMalloc().
 * It is the responsibility of the caller to free this buffer via chppFree().
 * @param outSize Upon success, will be set to the size of the output buffer,
 * in bytes
 * @return true on success, false if memory allocation failed
 */
bool chppWifiScanEventFromChre(const struct chreWifiScanEvent *in,
                               struct ChppWifiScanEvent **out, size_t *outSize);

#ifdef __cplusplus
}
#endif

#endif  // CHPP_WIFI_TYPES_H_
